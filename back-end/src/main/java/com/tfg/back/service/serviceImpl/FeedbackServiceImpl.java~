package com.tfg.back.service.serviceImpl;

import com.tfg.back.enums.FeedBackType;
import com.tfg.back.enums.SearchType;
import com.tfg.back.exceptions.feedback.FeedbackNotFoundException;
import com.tfg.back.exceptions.user.UserNotFoundException;
import com.tfg.back.mappers.FeedbackMapper;
import com.tfg.back.model.Client;
import com.tfg.back.model.Doctor;
import com.tfg.back.model.FeedBack;
import com.tfg.back.model.dtos.feedBack.FeedBackDtoGet;
import com.tfg.back.model.dtos.feedBack.FeedbackDtoCreate;
import com.tfg.back.repository.ClientRepository;
import com.tfg.back.repository.DoctorRepository;
import com.tfg.back.repository.FeedbackRepository;
import com.tfg.back.service.FeedbackService;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;


@Service
@AllArgsConstructor
public class FeedbackServiceImpl implements FeedbackService {

    private final FeedbackRepository feedbackRepository;
    private final ClientRepository clientRepository;
    private final DoctorRepository doctorRepository;

    @Override
    public List<FeedBackDtoGet> getAllFeedbacksByEmail(String email) {
        List<FeedBack> feedbacks = feedbackRepository.findByAuthorEmail(email);
        return List.of();
    }

    @Override
    public FeedBackDtoGet sendFeedback(String clientEmail, FeedbackDtoCreate feedbackDtoCreate) {

        Client author = clientRepository.findByEmail(clientEmail)
                .orElseThrow(()-> new UserNotFoundException(clientEmail, SearchType.EMAIL));
        Doctor writtenTo;
        if (!(feedbackDtoCreate.type() == FeedBackType.GENERAL)) {
            writtenTo = doctorRepository.findById(feedbackDtoCreate.writtenToId())
                    .orElseThrow(()-> new UserNotFoundException(feedbackDtoCreate.writtenToId(), SearchType.ID));
        }else{
            writtenTo = null;
        }

        FeedBack fb = FeedbackMapper.toEntity(feedbackDtoCreate, author, writtenTo);
        FeedBack savedFeedback = feedbackRepository.save(fb);

        return FeedbackMapper.toFeedBackDtoGet(savedFeedback);
    }

    @Override
    public void deleteFeedback(Long id) {

        FeedBack feedback = feedbackRepository.findById(id)
                .orElseThrow(()-> new FeedbackNotFoundException("Feedback with ID: "+id+" is not found"));
        feedbackRepository.delete(feedback);
    }
}
